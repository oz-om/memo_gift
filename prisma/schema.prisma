generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Item {
  id         String              @id @default(uuid())
  name       String
  desc       String              @db.Text
  price      Float
  theme      String
  images     String              @db.Text
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  customG    customGiftIncudes[]
  premade    includes[]
  categories itemCategory[]
  cartItem   cartItem[]

  @@map("items")
}

model itemCategory {
  item_id  String
  cat_name String
  cat      Category @relation(fields: [cat_name], references: [name], onDelete: Cascade)
  item     Item     @relation(fields: [item_id], references: [id], onDelete: Cascade)

  @@id([item_id, cat_name])
  @@index([item_id], map: "itemCategory_item_id_fkey")
  @@map("item_categories")
}

model Category {
  name      String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  premade   boxCategory[]
  items     itemCategory[]

  @@map("categories")
}

model PremadeGift {
  id         String        @id @default(uuid())
  name       String
  desc       String        @db.Text
  price      Float
  images     String        @db.Text
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  categories boxCategory[]
  variants   boxVariant[]
  includes   includes[]
  cartItem   cartItem[]

  @@map("premade_gifts")
}

model includes {
  premade_id String
  item_id    String
  item       Item        @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  premade    PremadeGift @relation(fields: [premade_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([premade_id, item_id])
  @@index([premade_id], map: "includes_premade_id_fkey")
}

model boxVariant {
  premade_id String
  variant_id String
  premade    PremadeGift @relation(fields: [premade_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variant    Variant     @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([premade_id, variant_id])
  @@index([premade_id], map: "boxVarint_premade_id_fkey")
  @@map("box_variants")
}

model Variant {
  id        String       @id @default(uuid())
  name      String       @unique
  value     String
  preview   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  premade   boxVariant[]
  cartItem  cartItem[]

  @@map("variants")
}

model boxCategory {
  premade_id String
  cat_name   String
  cat        Category    @relation(fields: [cat_name], references: [name], onDelete: Cascade, onUpdate: Cascade)
  premade    PremadeGift @relation(fields: [premade_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([premade_id, cat_name])
  @@index([premade_id], map: "boxCategory_premade_id_fkey")
  @@map("box_categories")
}

model customGift {
  id        String              @id @default(uuid())
  name      String?
  price     Float               @default(0)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  includes  customGiftIncudes[]
  cartItem  cartItem[]

  @@map("cosutom_gifts")
}

model customGiftIncudes {
  customGift_id String
  item_id       String
  quantity      Int        @default(1)
  customGift    customGift @relation(fields: [customGift_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  item          Item       @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([customGift_id, item_id])
  @@index([item_id, customGift_id], map: "customGiftIncudes_customGift_id_fkey")
  @@map("custom_gift_incudes")
}

model PostCard {
  id        String   @id @default(uuid())
  name      String
  image     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItem cartItem[]

  @@map("postcards")
}

model cartItem {
  id             String       @id @default(uuid())
  premade_id     String?
  custom_gift_id String?
  item_id        String?
  from           String?
  to             String?
  note           String?
  with_note      Boolean      @default(true)
  empty_card     Boolean      @default(false)
  post_card      String?
  quantity       Int          @default(1)
  chosed_variant String?
  address        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  premade        PremadeGift? @relation(fields: [premade_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customGift     customGift?  @relation(fields: [custom_gift_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  item           Item?        @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postcard       PostCard?    @relation(fields: [post_card], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variant        Variant?     @relation(fields: [chosed_variant], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cart           Cart[]
  Order          Order[]

  @@map("cart_items")
}

model Cart {
  id             String   @id @default(uuid())
  user_id        String?
  anonymous_user String?
  cart_item      String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  cartItem       cartItem @relation(fields: [cart_item], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user           User?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("carts")
}

model Order {
  id             String           @id @default(uuid())
  user_id        String?
  order_number   BigInt
  address        String
  email          String
  order_status   String           @default("pending")
  product_id     String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  product        cartItem         @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user           User?            @relation(fields: [user_id], references: [id], onDelete: NoAction)
  confirmedOrder ConfirmedOrder[]

  @@index([id], map: "order_id_fkey")
  @@map("orders")
}

model ConfirmedOrder {
  id             Int            @id @default(autoincrement())
  payment_method String
  order_id       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  order          Order          @relation(fields: [order_id], references: [id])
  shippedOrder   ShippedOrder[]

  @@index([order_id], map: "confirmed_orders_order_id_fkey")
  @@map("confirmed_orders")
}

model ShippedOrder {
  id                 Int            @id @default(autoincrement())
  confirmed_order_id Int
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  confirmedOrder     ConfirmedOrder @relation(fields: [confirmed_order_id], references: [id])

  @@index([confirmed_order_id], map: "shipped_orders_confirmed_order_id_fkey")
  @@map("shipped_orders")
}

model User {
  id                 String               @id @default(uuid())
  username           String
  first_name         String
  last_name          String
  email              String               @unique
  role               String               @default("user")
  password           String               @db.Text
  phone              String?
  address_id         String?
  profile_pic        String               @db.Text
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  address            Address[]
  cart               Cart[]
  order              Order[]
  ResetPasswordToken ResetPasswordToken[]

  @@index([id], map: "users_id_fkey")
  @@map("users")
}

model ResetPasswordToken {
  token     String?
  userId    String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([token], map: "user_reset_password_token_fkey")
  @@map("reset_password_tokens")
}

model Address {
  id        String   @id @default(uuid())
  user_id   String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id, user_id], map: "user_addresses_id_fkey")
  @@map("addresses")
}

model blog {
  id          String @id @default(uuid())
  title       String @db.Text
  author      String
  description String @db.Text
  cover       String @db.Text
  content     String @db.Text

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tags      blogTag[]

  @@map("blogs")
}

model tag {
  tag   String    @unique @default(uuid())
  blogs blogTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model blogTag {
  blog_id String
  tag     String
  blogs   blog   @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tags    tag    @relation(fields: [tag], references: [tag], onDelete: Cascade, onUpdate: Cascade)

  @@unique([blog_id, tag])
  @@map("blog_tags")
}
