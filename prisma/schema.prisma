generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Item {
  id         String              @id @default(uuid())
  name       String
  desc       String              @db.Text
  price      Float
  theme      String
  images     String              @db.Text
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  customG    customGiftIncudes[]
  premade    includes[]
  categories itemCategory[]

  @@map("items")
}

model itemCategory {
  item_id  String
  cat_name String
  cat      Category @relation(fields: [cat_name], references: [name], onDelete: Cascade)
  item     Item     @relation(fields: [item_id], references: [id], onDelete: Cascade)

  @@id([item_id, cat_name])
  @@index([cat_name], map: "itemCategory_cat_name_fkey")
}

model Category {
  name      String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  premade   boxCategory[]
  items     itemCategory[]

  @@map("categories")
}

model PremadeGift {
  id         String        @id @default(uuid())
  name       String
  desc       String        @db.Text
  price      Float
  images     String        @db.Text
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  categories boxCategory[]
  variants   boxVarint[]
  includes   includes[]

  @@map("premade_gifts")
}

model includes {
  premade_id String
  item_id    String
  item       Item        @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  premade    PremadeGift @relation(fields: [premade_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([premade_id, item_id])
  @@index([item_id], map: "includes_item_id_fkey")
}

model boxVarint {
  premade_id String
  variant_id String
  premade    PremadeGift @relation(fields: [premade_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variant    Variant     @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([premade_id, variant_id])
  @@index([variant_id], map: "boxVarint_variant_id_fkey")
}

model Variant {
  id        String      @id @default(uuid())
  name      String
  value     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  premade   boxVarint[]

  @@map("variants")
}

model boxCategory {
  premade_id String
  cat_name   String
  cat        Category    @relation(fields: [cat_name], references: [name], onDelete: Cascade, onUpdate: Cascade)
  premade    PremadeGift @relation(fields: [premade_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([premade_id, cat_name])
  @@index([cat_name], map: "boxCategory_cat_name_fkey")
}

model CosutomGift {
  id        String              @id @default(uuid())
  name      String
  price     Float
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  includes  customGiftIncudes[]

  @@map("custom_gifts")
}

model customGiftIncudes {
  customGift_id String
  item_id       String
  customG       CosutomGift @relation(fields: [customGift_id], references: [id])
  item          Item        @relation(fields: [item_id], references: [id])

  @@id([customGift_id, item_id])
  @@index([item_id], map: "customGiftIncudes_item_id_fkey")
}

model Order {
  id              String           @id @default(uuid())
  user_id         String?
  order_number    Int?
  address         String
  email           String
  premade_gift_id String?
  custom_gift_id  String
  item_id         String
  from_to         String
  order_state     String
  post_car_id     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  cart            Cart[]
  confirmedOrder  ConfirmedOrder[]
  postCard        PostCard         @relation(fields: [post_car_id], references: [id])

  @@index([post_car_id], map: "orders_post_car_id_fkey")
  @@map("orders")
}

model PostCard {
  id        String   @id @default(uuid())
  name      String
  image     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]

  @@map("postcards")
}

model Cart {
  id        String   @id @default(uuid())
  user_id   String?
  order_id  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [order_id], references: [id])

  @@index([order_id], map: "carts_order_id_fkey")
  @@map("carts")
}

model ConfirmedOrder {
  id             Int            @id @default(autoincrement())
  payment_method String
  order_id       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  order          Order          @relation(fields: [order_id], references: [id])
  shippedOrder   ShippedOrder[]

  @@index([order_id], map: "confirmed_orders_order_id_fkey")
  @@map("confirmed_orders")
}

model ShippedOrder {
  id                 Int            @id @default(autoincrement())
  confirmed_order_id Int
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  confirmedOrder     ConfirmedOrder @relation(fields: [confirmed_order_id], references: [id])

  @@index([confirmed_order_id], map: "shipped_orders_confirmed_order_id_fkey")
  @@map("shipped_orders")
}

model User {
  id          String   @id @default(uuid())
  full_name   String
  first_name  String
  last_name   String
  email       String
  password    String   @db.Text
  phone       String?
  address_id  String?
  profile_pic String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  address     Address? @relation(fields: [address_id], references: [id])

  @@index([address_id], map: "users_address_id_fkey")
  @@map("users")
}

model Address {
  id        String   @id @default(uuid())
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]

  @@map("addresses")
}
