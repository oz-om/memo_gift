// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Item {
  id         String         @id @default(uuid())
  name       String
  desc       String
  price      Float
  theme      String
  images     String
  categories itemCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations with
  premade includes[]
  customG customGiftIncudes[]

  @@map("items")
}

model itemCategory {
  item_id String
  cat_id  String
  item    Item     @relation(fields: [item_id], references: [id])
  cat     Category @relation(fields: [cat_id], references: [id])

  @@id([item_id, cat_id])
}

model Category {
  id   String @id @default(uuid())
  name String

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  // relations with
  items     itemCategory[]
  premade   boxCategory[]

  @@map("categories")
}

// premade gifts table
model PremadeGift {
  id         String        @id @default(uuid())
  name       String
  desc       String
  price      Float
  images     String
  variants   boxVarint[]
  categories boxCategory[]
  includes   includes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("premade_gifts")
}

// premade gifts incudes that make relation bewtween premade and items table
model includes {
  premade_id String
  item_id    String
  premade    PremadeGift @relation(fields: [premade_id], references: [id])
  item       Item        @relation(fields: [item_id], references: [id])

  @@id([premade_id, item_id])
}

// premade vairaits (themes) that make relation between premad and Varaints table
model boxVarint {
  premade_id String
  variant_id String
  premade    PremadeGift @relation(fields: [premade_id], references: [id])
  variant    Variant     @relation(fields: [variant_id], references: [id])

  @@id([premade_id, variant_id])
}

// variants table where all varaints that can premade have
model Variant {
  id    String @id @default(uuid())
  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation with
  premade boxVarint[]

  @@map("variants")
}

// premade categories that make relation between premade table and Categories table
model boxCategory {
  premade_id String
  cat_id     String
  premade    PremadeGift @relation(fields: [premade_id], references: [id])
  cat        Category    @relation(fields: [cat_id], references: [id])

  @@id([premade_id, cat_id])
}

// custom gifts table that contains the customers customized gifts
model CosutomGift {
  id       String              @id @default(uuid())
  name     String
  price    Float
  includes customGiftIncudes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("custom_gifts")
}

// custom gits includes items that make relation with items table with customGift table
model customGiftIncudes {
  customGift_id String
  item_id       String
  customG       CosutomGift @relation(fields: [customGift_id], references: [id])
  item          Item        @relation(fields: [item_id], references: [id])

  @@id([customGift_id, item_id])
}

// order tables that can have orders that customer make
model Order {
  id              String  @id @default(uuid())
  user_id         String?
  order_number    Int?
  address         String
  email           String
  premade_gift_id String?
  custom_gift_id  String
  item_id         String
  from_to         String
  order_state     String
  post_car_id     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // realtion with
  postCard       PostCard         @relation(fields: [post_car_id], references: [id])
  cart           Cart[]
  confirmedOrder ConfirmedOrder[]

  @@map("orders")
}

// postCard table that contains post card for each order cretaed
model PostCard {
  id    String @id @default(uuid())
  name  String
  image String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation with
  Order Order[]

  @@map("postcards")
}

model Cart {
  id       String  @id @default(uuid())
  user_id  String?
  order_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation with
  order Order @relation(fields: [order_id], references: [id])

  @@map("carts")
}

model ConfirmedOrder {
  id             Int    @id @default(autoincrement())
  payment_method String
  order_id       String
  order          Order  @relation(fields: [order_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation with
  shippedOrder ShippedOrder[]

  @@map("confirmed_orders")
}

model ShippedOrder {
  id                 Int            @id @default(autoincrement())
  confirmed_order_id Int
  confirmedOrder     ConfirmedOrder @relation(fields: [confirmed_order_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shipped_orders")
}

model User {
  id         String   @id @default(uuid())
  full_name  String
  first_name String
  last_name  String
  email      String
  password   String
  phone      String?
  address_id String?
  address    Address? @relation(fields: [address_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Address {
  id      String @id @default(uuid())
  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // realtion with
  user User[]

  @@map("addresses")
}
